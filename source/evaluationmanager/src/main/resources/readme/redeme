spring-hibernate配置
<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xsi:schemaLocation="  
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd  
            http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd  
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"  
            default-autowire="byName" default-lazy-init="false">  
              
    <bean id="propertyConfigurer"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="locations">  
            <list>  
                <value>classpath:/db/jdbc.properties</value>  
            </list>  
        </property>  
    </bean>  
      
    <!-- c3p0 数据源 -->  
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">  
        <property name="driverClass" value="${jdbc.driverClassName}"/>  
        <property name="jdbcUrl" value="${jdbc.url}"/>  
        <property name="user" value="${jdbc.username}"/>  
        <property name="password" value="${jdbc.password}"/>  
        <property name="minPoolSize" value="${c3p0.minPoolSize}"/>  
        <property name="maxPoolSize" value="${c3p0.maxPoolSize}"/>  
        <property name="initialPoolSize" value="${c3p0.initialPoolSize}"/>  
        <property name="maxIdleTime" value="${c3p0.maxIdleTime}"/>  
        <property name="acquireIncrement" value="${c3p0.acquireIncrement}"/>  
        <property name="testConnectionOnCheckin" value="${c3p0.testConnectionOnCheckin}"/>  
        <property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}"/>  
        <property name="acquireRetryDelay" value="${c3p0.acquireRetryDelay}"/>  
        <property name="breakAfterAcquireFailure" value="${c3p0.breakAfterAcquireFailure}"/>  
        <property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}"/>  
        <property name="automaticTestTable" value="${c3p0.automaticTestTable}"/>  
    </bean>     
      
    <!-- 配置sessionFactory -->  
    <!-- <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">-->
    <bean id="sessionFactory"  
        class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <property name="hibernateProperties">  
            <props>  
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>  
                <prop key="hibernate.show_sql">true</prop>  
                <prop key="hibernate.generate_statistics">true</prop>  
                <prop key="hibernate.connection.release_mode">auto</prop>  
                <prop key="hibernate.autoReconnect">true</prop>  
                  
                <prop key="query.substitutions">true 1, false 0, yes '1', no '1'</prop>  
  
                <prop key="hibernate.jdbc.fetch_size">50</prop>  
                <prop key="hibernate.jdbc.batch_size">25</prop>  
                <prop key="hibernate.jdbc.use_scrollable_resultset">true</prop>  
                <prop key="hibernate.cache.use_query_cache">true</prop>  
                <prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>  
            </props>  
        </property>  
        <property name="packagesToScan">  
            <list>  
                <value>com.integration</value>  
            </list>  
        </property>  
    </bean>  
  	
    <!-- 事务管理 -->  
    <bean id="transactionManager"  
        class="org.springframework.orm.hibernate3.HibernateTransactionManager">  
        <property name="sessionFactory" ref="sessionFactory"></property>  
    </bean>  
  
    <tx:advice id="txAdvice" transaction-manager="transactionManager" >  
        <tx:attributes >  
            <tx:method name="get*" read-only="true" />  
            <tx:method name="load*" read-only="true" />  
            <tx:method name="query*" read-only="true" />  
            <!-- other methods use the default transaction settings (see below) -->  
            <tx:method name="*" rollback-for="Exception" />  
        </tx:attributes >  
    </tx:advice>  
      
    <context:component-scan base-package="com.integration" />  
      
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" />  
</beans>  


***********************************************************************
***********************************************************************
**********************web.xml配置信息*************************************
***********************************************************************
***********************************************************************
web.xml配置
<?xml version="1.0" encoding="UTF-8"?>  
<web-app version="2.5"   
    xmlns="http://java.sun.com/xml/ns/javaee"   
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee   
    http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">  
  
    <display-name>Integration</display-name>  
    <!-- 指定spring配置文件的位置 -->  
    <context-param>  
        <param-name>contextConfigLocation</param-name>  
        <param-value>classpath:/context/applicationContext*.xml</param-value>  
    </context-param>  
      
    <!-- ============log4j begin=========-->  
    <!--for Spring-loading-->  
    <context-param>  
        <param-name>log4jConfigLocation</param-name>  
        <param-value>classpath:/log4j.properties</param-value>  
    </context-param>  
    <listener>  
        <listener-class>  
            org.springframework.web.util.Log4jConfigListener  
        </listener-class>  
    </listener>  
    <!-- ============log4j end=========-->  
      
    <!-- Struts 2 -->  
    <filter>  
        <filter-name>struts2</filter-name>  
        <filter-class>  
            org.apache.struts2.dispatcher.FilterDispatcher  
        </filter-class>  
    </filter>  
    <filter-mapping>  
        <filter-name>struts2</filter-name>  
        <url-pattern>/*</url-pattern>  
    </filter-mapping>  
    <!-- 自动加载applicationContext -->  
    <listener>  
        <listener-class>  
            org.springframework.web.context.ContextLoaderListener  
        </listener-class>  
    </listener>  
  
    <welcome-file-list>  
    <welcome-file>index.jsp</welcome-file>  
  </welcome-file-list>  
    
</web-app>  
*************************************************************
*************************************************************
*************************************************************
****************spring中配置hibernate映射文件********************
*************************************************************
*************************************************************
由于spring对hibernate配置文件hibernate.cfg.xml的集成相当好 
LocalSessionFactoryBean有好几个属性用来查找hibernate映射文件：

mappingResources、mappingLocations、mappingDirectoryLocations、mappingJarLocations 
他们的区别： 
1. mappingResources：指定classpath下具体映射文件名 
<property name="mappingResources"> 
<value>petclinic.hbm.xml <alue> 
< /property> 
2. mappingLocations：可以指定任何文件路径，并且可以指定前缀：classpath、file等 
<property name="mappingLocations"> 
<value>/WEB-INF/petclinic.hbm.xml <alue> 
< /property> 
< property name="mappingLocations"> 
<value>classpath:/com/company/domain/petclinic.hbm.xml <alue> 
< /property> 
也可以用通配符指定，'*'指定一个文件(路径)名，'**'指定多个文件(路径)名，例如： 
<property name="mappingLocations"> 
<value>classpath:/com/company/domainmaps/*.hbm.xml <alue> 
< /property> 
上面的配置是在com/company/domain包下任何maps路径下的hbm.xml文件都被加载为映射文件 

3. mappingDirectoryLocations：指定映射的文件路径 

<property name="mappingDirectoryLocations">
<list>
<value>WEB-INF/HibernateMappings<alue>
<st>
< /property>
也可以通过classpath来指出
<property name="mappingDirectoryLocations">
<list>
<value>classpath:/XXX/package/<alue>
<st>
< /property>

4. mappingJarLocations：指定加载的映射文件在jar文件中

*************************************************************
*************************************************************
*******************web.xml配置log4j***************************
*************************************************************
*************************************************************
*************************************************************
<context-param> 
   <param-name>log4jConfigLocation</param-name> 
   <param-value>WEB-INF/log4j.properties</param-value> 
</context-param> 
<context-param> 
   <param-name>log4jRefreshInterval</param-name> 
   <param-value>60000</param-value> 
</context-param> 
<!-- 需要添加spring-web.jar包，否则用发生错误信息 -->
<listener> 
   <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class> 
</listener> 